#!/bin/bash

set -xuo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
IFS=$'\n\t'

if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

image="ep-os.img"
mount="mnt"
script="setup"
rpi_zip="2021-01-11-raspios-buster-armhf-lite.zip"
rpi_url="https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2021-01-12/${rpi_zip}"

cleanup() {
    [[ -f "${mount}/tmp/${script}" ]] && rm "${mount}/tmp/${script}"
    if [[ -d "${mount}" ]]; then
        umount "${mount}/dev/pts" || true
        umount "${mount}/dev" || true
        umount "${mount}/proc" || true
        umount "${mount}/sys" || true
        umount "${mount}/boot" || true
        umount "${mount}" || true
        rmdir "${mount}" || true
    fi
    [ -n "${loopdev:-}" ] && losetup --detach "${loopdev}" || true
}
trap cleanup EXIT

[ ! -f "${rpi_zip}" ] && wget "${rpi_url}"

(ls *.img >> /dev/null 2>&1 && rm *.img) || echo "no .img files to remove"

unzip -u "${rpi_zip}"

mv "$(ls *.img | head -n 1)" "${image}"

dd if=/dev/zero bs=1M count=1024 >> "${image}"

loopdev=$(losetup --find --show "${image}")
echo "Created loopback device ${loopdev}"

parted --script "${loopdev}" print
parted --script "${loopdev}" resizepart 2 100%
parted --script "${loopdev}" print
#e2fsck -f "${loopdev}p2"
#resize2fs "${loopdev}p2"

#losetup -d "${loopdev}"

echo "Finished resizing disk image."

bootdev=$(ls "${loopdev}"*1)
rootdev=$(ls "${loopdev}"*2)
partprobe "${loopdev}"

[ ! -d "${mount}" ] && mkdir "${mount}"
mount "${rootdev}" "${mount}"
[ ! -d "${mount}/boot" ] && mkdir "${mount}/boot"
mount "${bootdev}" "${mount}/boot"

install -Dm755 "${script}" "${mount}/tmp/${script}"

mount --bind /proc "${mount}/proc"
mount --bind /sys "${mount}/sys"
mount --bind /dev "${mount}/dev"
mount --bind /dev/pts "${mount}/dev/pts"

cp /etc/resolv.conf "${mount}/etc/resolv.conf"
cp /usr/bin/qemu-arm-static "${mount}/usr/bin"
cp "${mount}/etc/ld.so.preload" "${mount}/etc/_ld.so.preload"
echo "" > "${mount}/etc/ld.so.preload"

chroot "${mount}" "/tmp/${script}"

mv "${mount}/etc/_ld.so.preload" "${mount}/etc/ld.so.preload"
